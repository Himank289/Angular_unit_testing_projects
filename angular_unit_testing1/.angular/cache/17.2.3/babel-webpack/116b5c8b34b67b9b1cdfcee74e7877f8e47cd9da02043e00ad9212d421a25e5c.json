{"ast":null,"code":"//https://angular.io/guide/testing-components-basics\nimport { TestBed } from \"@angular/core/testing\";\nimport { WelcomeComponent } from \"./welcome.component\";\nimport { UserService } from \"../../model/user.service\";\nclass MockUserService {\n  constructor() {\n    this.isLoggedIn = true;\n    this.user = {\n      name: 'Test User'\n    };\n  }\n}\nlet comp = undefined;\nlet userService = undefined;\ndescribe('WelcomeComponent', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      // provide the component-under-test and dependent service\n      providers: [WelcomeComponent, {\n        provide: UserService,\n        useClass: MockUserService\n      }]\n    });\n    // inject both the component and the dependent service.\n    comp = TestBed.inject(WelcomeComponent);\n    userService = TestBed.inject(UserService);\n  });\n  it('should not have welcome message after construction', () => {\n    if (comp) expect(comp.welcome).toBe('');\n  });\n  it('should welcome logged in user after Angular calls ngOnInit', () => {\n    if (comp && userService) {\n      comp.ngOnInit();\n      expect(comp.welcome).toContain(userService.user.name);\n    }\n  });\n  it('should ask user to log in if not logged in after ngOnInit', () => {\n    if (comp && userService) {\n      userService.isLoggedIn = false;\n      comp.ngOnInit();\n      expect(comp.welcome).not.toContain(userService.user.name);\n      expect(comp.welcome).toContain('log in');\n    }\n  });\n});","map":{"version":3,"names":["TestBed","WelcomeComponent","UserService","MockUserService","constructor","isLoggedIn","user","name","comp","undefined","userService","describe","beforeEach","configureTestingModule","providers","provide","useClass","inject","it","expect","welcome","toBe","ngOnInit","toContain","not"],"sources":["F:\\angular_examples\\angular_unit_testing1\\src\\app\\components\\Welcome\\welcome.component.spec.ts"],"sourcesContent":["//https://angular.io/guide/testing-components-basics\r\n \r\nimport { TestBed } from \"@angular/core/testing\";\r\nimport { WelcomeComponent } from \"./welcome.component\";\r\nimport { UserService } from \"../../model/user.service\";\r\n  \r\nclass MockUserService {\r\n    isLoggedIn = true;\r\n    user = { name: 'Test User' };\r\n  }\r\n \r\n  let comp: WelcomeComponent | undefined = undefined;\r\n let userService: UserService | undefined = undefined;\r\n \r\n describe('WelcomeComponent',()=>{\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      // provide the component-under-test and dependent service\r\n      providers: [WelcomeComponent, { provide: UserService, useClass: MockUserService }],\r\n    });\r\n    // inject both the component and the dependent service.\r\n     comp = TestBed.inject(WelcomeComponent);\r\n     userService = TestBed.inject(UserService);\r\n  });\r\n \r\n  it('should not have welcome message after construction', () => {\r\n    if(comp)\r\n       expect(comp.welcome).toBe('');\r\n  });\r\n \r\n  it('should welcome logged in user after Angular calls ngOnInit', () => {\r\n    if(comp && userService)\r\n    {\r\n    comp.ngOnInit();\r\n    expect(comp.welcome).toContain(userService.user.name);\r\n    }\r\n  });\r\n \r\n  it('should ask user to log in if not logged in after ngOnInit', () => {\r\n    if(comp && userService)\r\n    {\r\n    userService.isLoggedIn = false;\r\n    comp.ngOnInit();\r\n    expect(comp.welcome).not.toContain(userService.user.name);\r\n    expect(comp.welcome).toContain('log in');\r\n    }\r\n  });\r\n});"],"mappings":"AAAA;AAEA,SAASA,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,SAASC,WAAW,QAAQ,0BAA0B;AAEtD,MAAMC,eAAe;EAArBC,YAAA;IACI,KAAAC,UAAU,GAAG,IAAI;IACjB,KAAAC,IAAI,GAAG;MAAEC,IAAI,EAAE;IAAW,CAAE;EAC9B;;AAEA,IAAIC,IAAI,GAAiCC,SAAS;AACnD,IAAIC,WAAW,GAA4BD,SAAS;AAEpDE,QAAQ,CAAC,kBAAkB,EAAC,MAAI;EAC/BC,UAAU,CAAC,MAAK;IACdZ,OAAO,CAACa,sBAAsB,CAAC;MAC7B;MACAC,SAAS,EAAE,CAACb,gBAAgB,EAAE;QAAEc,OAAO,EAAEb,WAAW;QAAEc,QAAQ,EAAEb;MAAe,CAAE;KAClF,CAAC;IACF;IACCK,IAAI,GAAGR,OAAO,CAACiB,MAAM,CAAChB,gBAAgB,CAAC;IACvCS,WAAW,GAAGV,OAAO,CAACiB,MAAM,CAACf,WAAW,CAAC;EAC5C,CAAC,CAAC;EAEFgB,EAAE,CAAC,oDAAoD,EAAE,MAAK;IAC5D,IAAGV,IAAI,EACJW,MAAM,CAACX,IAAI,CAACY,OAAO,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EAClC,CAAC,CAAC;EAEFH,EAAE,CAAC,4DAA4D,EAAE,MAAK;IACpE,IAAGV,IAAI,IAAIE,WAAW,EACtB;MACAF,IAAI,CAACc,QAAQ,EAAE;MACfH,MAAM,CAACX,IAAI,CAACY,OAAO,CAAC,CAACG,SAAS,CAACb,WAAW,CAACJ,IAAI,CAACC,IAAI,CAAC;IACrD;EACF,CAAC,CAAC;EAEFW,EAAE,CAAC,2DAA2D,EAAE,MAAK;IACnE,IAAGV,IAAI,IAAIE,WAAW,EACtB;MACAA,WAAW,CAACL,UAAU,GAAG,KAAK;MAC9BG,IAAI,CAACc,QAAQ,EAAE;MACfH,MAAM,CAACX,IAAI,CAACY,OAAO,CAAC,CAACI,GAAG,CAACD,SAAS,CAACb,WAAW,CAACJ,IAAI,CAACC,IAAI,CAAC;MACzDY,MAAM,CAACX,IAAI,CAACY,OAAO,CAAC,CAACG,SAAS,CAAC,QAAQ,CAAC;IACxC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}